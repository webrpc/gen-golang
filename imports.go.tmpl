{{- define "imports" -}}
{{- $types := .Types -}}
{{- $opts := .Opts -}}

{{- /* Map of import paths. */ -}}
{{- $stdlibImports := dict -}}
{{- set $stdlibImports "context" "" -}}
{{- set $stdlibImports "errors" "" -}}
{{- set $stdlibImports "fmt" "" -}}
{{- set $stdlibImports "net/http" "" -}}
{{- set $stdlibImports "strings" "" -}}

{{- if eq $opts.json "stdlib" -}}
	{{- set $stdlibImports "encoding/json" "" -}}
{{- end -}}

{{- if $opts.errorStackTrace }}
	{{- set $stdlibImports "runtime" "" -}}
{{- end -}}

{{- if $opts.client }}
	{{- set $stdlibImports "bytes" "" -}}
	{{- set $stdlibImports "io" "" -}}
	{{- set $stdlibImports "net/url" "" -}}
{{- end -}}

{{- if $opts.server }}
	{{- set $stdlibImports "io" "" -}}

	{{- if $opts.fixEmptyArrays }}
		{{- set $stdlibImports "reflect" "" -}}
	{{- end -}}
{{- end -}}

{{- if $opts.streaming -}}
	{{- if $opts.server }}
	{{- set $stdlibImports "sync" "" -}}
	{{- set $stdlibImports "time" "" -}}
	{{- end -}}
	{{- if $opts.client }}
	{{- set $stdlibImports "bufio" "" -}}
	{{- end -}}
{{- end -}}

{{- /* Import "time" if there's at least one timestamp. */ -}}
{{ if $opts.types -}}
{{ if eq $opts.importTypesFrom "" -}}
   {{- range $_, $type := $types -}}
       {{- range $_, $field := $type.Fields -}}
           {{- if $field.Type -}}
               {{- if eq $field.Type.Expr "timestamp" -}}
                   {{- set $stdlibImports "time" "" -}}
               {{- end -}}
           {{- end -}}
       {{- end -}}
   {{- end -}}
{{- end -}}
{{- end -}}

import (

{{- /* Print stdlib imports. */ -}}
{{- range $import, $rename := $stdlibImports }}
	{{if ne $rename ""}}{{$rename}} {{end}}"{{$import}}"
{{- end -}}

{{- /* Print custom type imports. */ -}}
{{- $imports := dict -}}

{{- if eq $opts.json "stdlib" -}}
	{{- /* Already imported in the stdlib section. */ -}}
{{- else if eq $opts.json "jsoniter" -}}
	{{- set $imports "github.com/json-iterator/go" "jsoniter" -}}
{{- else if eq $opts.json "sonic" -}}
	{{- set $imports "github.com/bytedance/sonic" "" -}}
{{- else -}}
	{{- set $imports $opts.json "json" -}}
{{- end -}}

{{- if ne $opts.importTypesFrom "" }}
	{{- set $imports $opts.importTypesFrom "" -}}
{{- else -}}
	{{- range $_, $type := $types -}}
		{{- /* TODO: We might need to loop through method args too. */ -}}
		{{- range $meta := $type.Meta -}}
				{{- if exists $meta "go.type.import" -}}
					{{- set $imports (get $meta "go.type.import") "" -}}
				{{- end -}}
			{{- end -}}
		{{- if $opts.types }}
			{{- range $_, $field := $type.Fields -}}
				{{- range $meta := $field.Meta -}}
					{{- if exists $meta "go.type.import" -}}
						{{- set $imports (get $meta "go.type.import") "" -}}
					{{- end -}}
				{{- end -}}
			{{- end -}}
		{{- end }}
	{{- end -}}
{{- end }}
{{ range $import, $rename := $imports }}
	{{- if not (exists $stdlibImports $import)}}
	{{if ne $rename ""}}{{$rename}} {{end}}"{{$import}}"
	{{- end }}
{{- end }}
)

{{- if eq $opts.json "jsoniter" }}

// Opinionated config for -json=jsoniter, see https://github.com/json-iterator/go/blob/master/config.go.
var json = jsoniter.Config{
	ValidateJsonRawMessage: true,
}.Froze()

{{- else if eq $opts.json "sonic" }}

// Opinionated config for -json=sonic, see https://github.com/bytedance/sonic/blob/main/api.go.
var json = sonic.Config{
	NoNullSliceOrMap: true, // Encode empty Array or Object as '[]' or '{}' instead of 'null'.
	CompactMarshaler: true,
	CopyString : true,
	ValidateString : true,
}.Froze()

{{- end -}}

{{- end -}}
