{{define "types"}}
{{- $typeMap := .TypeMap -}}

{{- if .Types -}}
//
// Types
//
{{ range $_, $type := .Types -}}

{{- if eq $type.Kind "enum" }}
{{template "enum" dict "Name" $type.Name "Type" $type.Type "Fields" $type.Fields }}
{{ end -}}

{{- if eq $type.Kind "struct" }}
{{template "struct" dict "Name" $type.Name "Fields" $type.Fields "TypeMap" $typeMap}}
{{ end -}}

{{- end -}}
{{- end -}}

{{- if .Services -}}
{{range .Services}}
type {{.Name}} interface {
	{{- range $_, $method := .Methods}}
	{{.Name}}(ctx context.Context{{range $_, $input := .Inputs}}, {{$input.Name}} {{template "type" dict "Type" $input.Type "Optional" $input.Optional "TypeMap" $typeMap}}{{end}}) {{if len .Outputs}}({{end}}{{range $i, $output := .Outputs}}{{template "type" dict "Type" $output.Type "Optional" $output.Optional "TypeMap" $typeMap}}{{if lt $i (len $method.Outputs)}}, {{end}}{{end}}error{{if len .Outputs}}){{end}}
	{{- end}}
}
{{end}}
var WebRPCServices = map[string][]string{
{{- range .Services}}
	"{{.Name}}": {
		{{- range .Methods}}
		"{{.Name}}",
		{{- end}}
	},
{{- end}}
}
{{- end -}}

{{- end -}}
