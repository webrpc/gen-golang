{{define "types"}}
{{- $typeMap := .TypeMap -}}
{{- $typePrefix := .TypePrefix -}}
{{- $types := .Types -}}
{{- $services := .Services -}}
{{- $opts := .Opts -}}

//
// Schema types
//
{{ range $_, $type := $types -}}

{{- if eq $type.Kind "enum" }}
	{{- if eq $type.Type.Expr "string" }}
{{template "enumString" dict "Name" $type.Name "Type" $type.Type "TypePrefix" $typePrefix "Fields" $type.Fields "Opts" $opts}}
	{{- else }}
{{template "enum" dict "Name" $type.Name "Type" $type.Type "TypePrefix" $typePrefix "Fields" $type.Fields "Opts" $opts}}
	{{- end -}}
{{ end -}}

{{- if and (eq $type.Kind "struct") $opts.types }}
{{- if gt (len $type.Comments) 0 }}
	{{- range $_, $comment := $type.Comments }}
		// {{ replaceAll $comment "\"" "'" }}
	{{- end }}
{{- end }}
{{template "struct" dict "Name" $type.Name "TypeMap" $typeMap "TypePrefix" $typePrefix "Fields" $type.Fields}}
{{ end -}}

{{- end }}

var methods = map[string]method{
	{{- range $_, $service := $services -}}
	{{- range $_, $method := $service.Methods }}
	"/rpc/{{$service.Name}}/{{$method.Name}}": {
		name: "{{$method.Name}}",
		service: "{{$service.Name}}",
		annotations: map[string]string{ {{- range $_, $annotation := $method.Annotations -}}"{{$annotation.AnnotationType}}": "{{$annotation.Value}}", {{- end -}} },
	},
	{{- end -}}
    {{ end }}
}

func WebrpcMethods() map[string]method {
	res := make(map[string]method, len(methods))
	for k, v := range methods {
		res[k] = v
	}

	return res
}

var WebRPCServices = map[string][]string{
{{- range $_, $service := $services}}
	"{{$service.Name}}": {
		{{- range $_, $method := $service.Methods}}
		"{{$method.Name}}",
		{{- end}}
	},
{{- end}}
}

{{- end -}}
