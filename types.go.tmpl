{{define "types"}}
{{- $typeMap := .TypeMap -}}
{{- $typePrefix := .TypePrefix -}}
{{- $types := .Types -}}
{{- $services := .Services -}}
{{- $opts := .Opts -}}

{{- if $types -}}
//
// Types
//
{{ range $_, $type := $types -}}

{{- if eq $type.Kind "enum" }}
{{template "enum" dict "Name" $type.Name "Type" $type.Type "TypePrefix" $typePrefix "Fields" $type.Fields "Opts" $opts}}
{{ end -}}

{{- if and (eq $type.Kind "struct") $opts.types }}
{{template "struct" dict "Name" $type.Name "TypeMap" $typeMap "TypePrefix" $typePrefix "Fields" $type.Fields}}
{{ end -}}

{{- end -}}
{{- end -}}

{{- if and $services $opts.types -}}
{{ range $_, $service := $services}}
type {{$service.Name}} interface {
	{{- range $_, $method := $service.Methods}}
	{{.Name}}(ctx context.Context{{range $_, $input := $method.Inputs}}, {{$input.Name}} {{template "type" dict "Type" $input.Type "TypeMap" $typeMap "TypePrefix" $typePrefix "Optional" $input.Optional}}{{end}}) {{if len .Outputs}}({{end}}{{range $i, $output := .Outputs}}{{template "type" dict "Type" $output.Type "TypeMap" $typeMap "TypePrefix" $typePrefix "Optional" $output.Optional}}{{if lt $i (len $method.Outputs)}}, {{end}}{{end}}error{{if len $method.Outputs}}){{end}}
	{{- end}}
}
{{end}}
var WebRPCServices = map[string][]string{
{{- range $_, $service := $services}}
	"{{$service.Name}}": {
		{{- range $_, $method := $service.Methods}}
		"{{$method.Name}}",
		{{- end}}
	},
{{- end}}
}
{{- end -}}

{{- end -}}
