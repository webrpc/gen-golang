{{define "errors"}}
//
// Errors
//

type RPCError struct {
	Name       string `json:"error"`
	Code       int    `json:"code"`
	Message    string `json:"message"`
	Cause      string `json:"cause,omitempty"`
	HTTPStatus int    `json:"httpStatus"`
	cause      error
}

var _ error = RPCError{}

func (e RPCError) Error() string {
	return fmt.Sprintf("%s %d - %s", e.Name, e.Code, e.Message)
}

func (e RPCError) Is(target error) bool {
	rpcErr, ok := target.(RPCError)
	if !ok {
		return false
	}

	return rpcErr.Code == e.Code
}

func (e RPCError) Unwrap() error {
	return e.cause
}

func ErrorWithCause(rpcErr RPCError, cause error) RPCError {
	err := rpcErr
	err.cause = cause
	err.Cause = cause.Error()
	return err
}

// Webrpc errors
var (
	ErrWebrpcPanic            = RPCError{Code: -1, Name: "ErrWebrpcPanic", Message: "panic", HTTPStatus: 500}
	ErrWebrpcBadRoute         = RPCError{Code: -2, Name: "ErrWebrpcBadRoute", Message: "bad route", HTTPStatus: 404}
	ErrWebrpcBadRequest       = RPCError{Code: -3, Name: "ErrWebrpcBadRequest", Message: "bad request", HTTPStatus: 400}
	ErrWebrpcBadResponse      = RPCError{Code: -4, Name: "ErrWebrpcBadResponse", Message: "bad response", HTTPStatus: 500}
)

{{- if len .Errors }}

// Schema errors
var (
{{- range $_, $error := .Errors}}
	{{ printf "Err%s = RPCError{Code: %v, Name: %q, Message: %q, HTTPStatus: %v}" $error.Name $error.Code $error.Name $error.Message $error.HTTPStatus}}
{{- end}}
)
{{- end}}

{{- end }}
